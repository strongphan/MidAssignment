// <auto-generated />
using System;
using ManhPT_MidAssignment.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManhPT_MidAssignment.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20240607022924_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6dea16e-cc8e-4bff-9ddb-319af23a597f"),
                            Author = "J. R. R. Tolkien",
                            AvailableCopies = 10,
                            CategoryId = new Guid("65209f03-4db1-49be-bea4-12073495ae6b"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7284),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7285),
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = new Guid("ba8c650a-9ac1-4c50-aa57-ba327bea3744"),
                            Author = "Stephen Hawking",
                            AvailableCopies = 10,
                            CategoryId = new Guid("021774e2-1195-445c-99de-49c62e523ab2"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7289),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7289),
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            Id = new Guid("7304dfdf-1737-4615-be6c-30a817a9eefb"),
                            Author = "Orson Scott Card",
                            AvailableCopies = 10,
                            CategoryId = new Guid("0e1d02a8-6052-4384-9b5b-d60d1c9403d5"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7292),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7292),
                            Title = "Ender's Game"
                        },
                        new
                        {
                            Id = new Guid("96b77c6a-7e66-4c18-b699-35d8880afa91"),
                            Author = "Patrick Rothfuss",
                            AvailableCopies = 10,
                            CategoryId = new Guid("1a9158d2-26c0-4c05-b6dd-773dcd1ff63a"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7294),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7295),
                            Title = "The Name of the Wind"
                        },
                        new
                        {
                            Id = new Guid("696630fa-26d1-4f2b-9130-6de86dfb966b"),
                            Author = "Agatha Christie",
                            AvailableCopies = 10,
                            CategoryId = new Guid("0d44adf2-c781-45cb-af10-a831843a680f"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7299),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7300),
                            Title = "And Then There Were None"
                        },
                        new
                        {
                            Id = new Guid("82e9c557-88ed-40e3-a0e2-e9339a6510af"),
                            Author = "Jane Austen",
                            AvailableCopies = 10,
                            CategoryId = new Guid("021774e2-1195-445c-99de-49c62e523ab2"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7303),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7303),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = new Guid("4d3a4488-06a4-47b6-96d2-06170f501a62"),
                            Author = "Harper Lee",
                            AvailableCopies = 10,
                            CategoryId = new Guid("0e1d02a8-6052-4384-9b5b-d60d1c9403d5"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7305),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7306),
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("8a6f2788-28f2-42ae-8fd4-024c695ce374"),
                            Author = "F. Scott Fitzgerald",
                            AvailableCopies = 10,
                            CategoryId = new Guid("1a9158d2-26c0-4c05-b6dd-773dcd1ff63a"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7308),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7308),
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = new Guid("03383ea8-cf5d-403c-8fd3-e3bf8ab36c20"),
                            Author = "Gabriel García Márquez",
                            AvailableCopies = 10,
                            CategoryId = new Guid("0d44adf2-c781-45cb-af10-a831843a680f"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7310),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7311),
                            Title = "One Hundred Years of Solitude"
                        },
                        new
                        {
                            Id = new Guid("8d6c1f7d-3775-444e-82c5-c194482aaeac"),
                            Author = "Marcel Proust",
                            AvailableCopies = 10,
                            CategoryId = new Guid("0e1d02a8-6052-4384-9b5b-d60d1c9403d5"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7313),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7314),
                            Title = "In Search of Lost Time"
                        },
                        new
                        {
                            Id = new Guid("ffdb73c2-5fb6-4b65-be7a-42404f6d320f"),
                            Author = "Miguel de Cervantes",
                            AvailableCopies = 10,
                            CategoryId = new Guid("0d44adf2-c781-45cb-af10-a831843a680f"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7316),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7316),
                            Title = "Don Quixote"
                        },
                        new
                        {
                            Id = new Guid("66dafbbe-7632-4c57-bffc-56e8b8374ca4"),
                            Author = "Mary Shelley",
                            AvailableCopies = 10,
                            CategoryId = new Guid("1a9158d2-26c0-4c05-b6dd-773dcd1ff63a"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7318),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7319),
                            Title = "Frankenstein"
                        });
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.BookBorrowingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("RequestorId");

                    b.ToTable("BookBorrowingRequests");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.BookBorrowingRequestDetails", b =>
                {
                    b.Property<Guid>("BorrowingRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookBorrowingRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BorrowingRequestId", "BookId");

                    b.HasIndex("BookBorrowingRequestId");

                    b.HasIndex("BookId");

                    b.ToTable("BookBorrowingRequestDetails");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65209f03-4db1-49be-bea4-12073495ae6b"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7207),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7208),
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = new Guid("021774e2-1195-445c-99de-49c62e523ab2"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7227),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7228),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = new Guid("0e1d02a8-6052-4384-9b5b-d60d1c9403d5"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7229),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7230),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = new Guid("1a9158d2-26c0-4c05-b6dd-773dcd1ff63a"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7231),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7232),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("0d44adf2-c781-45cb-af10-a831843a680f"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7233),
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7234),
                            Name = "Mystery"
                        });
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0be0600-cae9-42ff-8879-79618b7ea7eb"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7069),
                            Email = "user1@example.com",
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7087),
                            Name = "user1",
                            Password = "$2a$12$0NPISodxxD/AH/OGrKghM.xTFgZHmg1MZlDC.FJo6SS7gYSdhdo9i",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("8d6862bc-162e-47c4-b70d-45db33167b29"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7094),
                            Email = "user2@example.com",
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7094),
                            Name = "user2",
                            Password = "$2a$12$0NPISodxxD/AH/OGrKghM.xTFgZHmg1MZlDC.FJo6SS7gYSdhdo9i",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("0007b24b-c914-41fd-b674-6a2d5b38226d"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7097),
                            Email = "admin@example.com",
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7098),
                            Name = "admin",
                            Password = "$2a$12$0NPISodxxD/AH/OGrKghM.xTFgZHmg1MZlDC.FJo6SS7gYSdhdo9i",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("e9f29034-0170-4c6f-b6de-803087674b2f"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7100),
                            Email = "user3@example.com",
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7101),
                            Name = "user3",
                            Password = "$2a$12$0NPISodxxD/AH/OGrKghM.xTFgZHmg1MZlDC.FJo6SS7gYSdhdo9i",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("30caa91c-9e16-464b-801e-23dc6b849edb"),
                            CreatedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7103),
                            Email = "user4@example.com",
                            ModifiedAt = new DateTime(2024, 6, 7, 9, 29, 23, 814, DateTimeKind.Local).AddTicks(7103),
                            Name = "user4",
                            Password = "$2a$12$0NPISodxxD/AH/OGrKghM.xTFgZHmg1MZlDC.FJo6SS7gYSdhdo9i",
                            Role = 0
                        });
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.Book", b =>
                {
                    b.HasOne("ManhPT_MidAssignment.Domain.Entity.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.BookBorrowingRequest", b =>
                {
                    b.HasOne("ManhPT_MidAssignment.Domain.Entity.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManhPT_MidAssignment.Domain.Entity.User", "Requestor")
                        .WithMany("BookBorrowingRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.BookBorrowingRequestDetails", b =>
                {
                    b.HasOne("ManhPT_MidAssignment.Domain.Entity.BookBorrowingRequest", "BookBorrowingRequest")
                        .WithMany("BookBorrowingRequestDetails")
                        .HasForeignKey("BookBorrowingRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManhPT_MidAssignment.Domain.Entity.Book", "Book")
                        .WithMany("BookBorrowingRequestDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookBorrowingRequest");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.Book", b =>
                {
                    b.Navigation("BookBorrowingRequestDetails");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.BookBorrowingRequest", b =>
                {
                    b.Navigation("BookBorrowingRequestDetails");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ManhPT_MidAssignment.Domain.Entity.User", b =>
                {
                    b.Navigation("BookBorrowingRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
